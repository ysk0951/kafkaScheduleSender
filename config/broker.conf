
# KAFKA OFFSET RESET METHOD
# earliest, latest

input {
    
    # log from dfinder internal log
    if 1==1 {
        kafka {
            group_id => "internal_logstash"
            bootstrap_servers => "127.0.0.1:9092"
            topics => ["esm_event", "audit"]
            auto_offset_reset => "latest"
            max_poll_interval_ms => "1000"
            max_poll_records => "500"
            decorate_events => true
            codec => json
            add_field => { "[@metadata][input]" => "internal"
                           "[@metadata][message]" => "message"
                         }
        }
    }

    # log from filebeat
    if 1==1 {
        kafka {
            group_id => "external_logstash"
            bootstrap_servers => "127.0.0.1:9092"
            topics => ["external"]
            auto_offset_reset => "latest"
            max_poll_interval_ms => "200"
            max_poll_records => "500"
            decorate_events => true
            codec => json
            add_field => { "[@metadata][input]" => "external" 
                           "[@metadata][message]" => "message"
                         }
        }
    }

   # log from Test_data_Generater 
   if 1==1{
         kafka {
            group_id => "test_data_logstash"
            bootstrap_servers => "127.0.0.1:9092"
            topics => ["woori_ai_fds"]
            auto_offset_reset => "latest"
            max_poll_interval_ms => "200"
            max_poll_records => "500"
            decorate_events => true
            codec => json
            add_field => { "[@metadata][input]" => "woori_ai_fds" }
        }
   }
}

filter {

    ##############################################################################################
    # PreSet Option # => Don't Modify
    ##############################################################################################
    if ![@id] { uuid { target => "@id" }}
    mutate { gsub => ["@id", "[\\?#-]", "", "message", "\n", "", "message", "\r", "", "message", "\"", ""] }
    mutate { strip => ["message"] }
    ruby { code => "event.set('@rcv_log_time', event.timestamp.time.localtime.strftime('%Y/%m/%d %H:%M:%S.%L'))" }
    ##############################################################################################


    ##############################################################################################
    # Contents #  => User Code 
    ##############################################################################################
    if [@metadata][input] == "internal" {
        # ESM OR AUDIT
        if [@metadata][kafka][topic] == "esm_event" {
            date {
                match => [ "@log_timestamp", "yyyyMMddHHmmss.SSS", "yyyyMMddHHmmss", "yyyyMMddHHmmssSSS" ]
                target => "@timestamp"
            }
            mutate {
                add_field => { "[@metadata][index_name]" => "esm"}
                convert => { 
                    "tps" => "integer"
                    "jvm_used_mega_byte" => "float"
                    "jvm_used_percent" => "float"
                    "rcv_queue" => "integer"
                    "kafka_work_queue" => "integer"
                    "kafka_sender_queue" => "integer"
                    "kafka_pending_queue" => "integer"
                    "asset_db" => "integer"
                    "asset_db_worker" => "integer"
                    "asset_index" => "integer"
                    "asset_mapping" => "integer"
                    "asset_raw_size" => "integer"
                    "receive_queue" => "integer"
                    "worker_queue" => "integer"
                    "bulk_queue" => "integer"
                    "bulk_fail_queue" => "integer"
                    "worker_active" => "integer"
                    "worker_total" => "integer"
                    "worker_fail_active" => "integer"
                    "worker_fail_total" => "integer"
                    "es_pool_active" => "integer"
                    "es_pool_max" => "integer"
                    "persona_data_queue" => "integer"
                    "persona_worker_active" => "integer"
                    "persona_worker_queue" => "integer"
                    "persona_sender_queue" => "integer"
                    "persona_set" => "integer"
                    "persona_range_set" => "integer"
                    "stat_es_boss_queue" => "integer"
                    "stat_es_sender_queue" => "integer"
                    "stat_redis_sender_queue" => "integer"
                    "stat_set" => "integer"
                    "profile_cache" => "integer"
                    "rule" => "integer"
                    "worker" => "integer"
                    "object" => "integer"
                    "persona" => "integer"
                    "persona_range" => "integer"
                    "profile" => "integer"
                    "notify" => "integer"
                    "poll" => "integer"
                    "task" => "integer"
                    "command" => "integer"
                    "incident_symptom" => "integer"
                    "incident_data1" => "integer"
                    "incident_data2" => "integer"
                    "persona_data1" => "integer"
                    "persona_data2" => "integer"
                    "action_redis" => "integer"
                    "action_data1" => "integer"
                    "action_data2" => "integer"
                    "command_queue" => "integer"
                    "task_queue" => "integer"
                    "worker_max" => "integer"
                }
            }
        } else if [@metadata][kafka][topic] == "audit" {
            mutate {
                add_field => { "[@metadata][index_name]" => "audit"}
            }
        }


    } else if [@metadata][input] == "external" {
        # Collect Log Type
        if [@metadata][kafka][topic] == "external" {
            dissect {
                mapping => {
                    "message" => "[%{@dissect_log_time}],%{@dissect_log_kv}"
                }
            }
            kv {
                allow_duplicate_values => false
                source => "@dissect_log_kv"
                trim_value => "\""
                trim_key => "\"\ \(\)"
                field_split => "||"
                value_split => "="
            }
            date {
                match => [ "@dissect_log_time", "yyyyMMddHHmmss.SSS", "yyyyMMddHHmmss", "yyyyMMddHHmmssSSS" ]
                target => "@timestamp"
            }
            mutate {
                add_field => { "[@metadata][index_name]" => "external"}
            }
        }
    } 
    
    if [@metadata][kafka][topic] == "woori_ai_fds" {           
        dissect {
            mapping => {
                "message" => "[%{@dissect_log_time}],%{@dissect_log_kv}"
            }
        }
        kv {
            allow_duplicate_values => false
            source => "@dissect_log_kv"
            trim_value => "\""
            trim_key => "\"\ \(\)"
            field_split => ":"
            value_split => ","
        }
        date {
            match => [ "@dissect_log_time", "yyyyMMddHHmmss.SSS", "yyyyMMddHHmmss", "yyyyMMddHHmmssSSS" ]
            target => "@timestamp"
        }
        mutate {
            add_field => { "[@metadata][index_name]" => "incident"}
        }
    }    
    ##############################################################################################
    # Convert Option #
    ##############################################################################################
    if 1==2 {
        mutate {
            convert => {}
        }
    }
    if 1==1 {
        mutate {
            remove_field => ["type", "beat", "tags", "@dissect_log_time", "@dissect_log_kv", "message", "input", "ecs", "agent", "host", "log"]
        }
    }

    ##############################################################################################
    # KAFKA Metadata Setting
    ##############################################################################################
    if [@metadata][kafka][topic] {
        mutate {
            add_field => { "@kafka_topic" => "%{[@metadata][kafka][topic]}" }
        }
    }
    if [@metadata][kafka][consumer_group] {
       mutate {
            add_field => { "@kafka_consumer_group" => "%{[@metadata][kafka][consumer_group]}" }
       }
    }
    if [@metadata][kafka][timestamp] {
       mutate {
            add_field => { "@kafka_timestamp" => "%{[@metadata][kafka][timestamp]}" }
       }
       mutate { convert => { "@kafka_timestamp" => "integer" } }
    }
    if [@metadata][kafka][offset] {
       mutate {
            add_field => { "@kafka_offset" => "%{[@metadata][kafka][offset]}" }
       }
       mutate { convert => { "@kafka_offset" => "integer" } }
    }
    if [log][file][path] {
       mutate {
            add_field => { "@beat_log_path" => "%{[log][file][path]}" }
       }
    }
    if [host][id] {
       mutate {
            add_field => { 
                            "@beat_id" => "%{[host][id]}" 
                            "@beat_host_name" => "%{[host][name]}" 
                            "@beat_host_arch" => "%{[host][architecture]}"

                         }
       }
    }
    if [host][os] {
       mutate {
            add_field => { 
                            "@beat_os_kernel" => "%{[host][os][kernel]}" 
                            "@beat_os_version" => "%{[host][os][version]}" 
                            "@beat_os_name" => "%{[host][os][name]}" 
                         }
       }
    }
    if [host][ip] {
       mutate {
            add_field => { 
                            "@beat_host_ip" => "%{[host][ip]}" 
                            "@beat_host_mac" => "%{[host][mac]}" 
                         }
       }
    }

    ##############################################################################################
    # Elasticsearch Index Name Setting & Json Value empty check
    ##############################################################################################
    if [@metadata][index_name] {
        mutate {
            replace => { "@index" => "%{[@metadata][index_name]}"}
        }
    } else {
        mutate {
            add_field => { "@index" => "fail"}
        }
    }

    ruby {
        code => "
            hash = event.to_hash
            hash.each do |k,v|
                if v == nil
                    event.remove(k)
                else
                    if k.start_with?('[')
                        event.remove(k)
                    end    
                end
            end
        "
    }

    if ![@index_day] { ruby { code => "event.set('@index_day', event.timestamp.time.localtime.strftime('%Y.%m.%d'))"}}
    ##############################################################################################
}


output {
    
    # debug print
    if 1==1 {
        stdout { codec => rubydebug { metadata => true } }
    }

    # kafka topic asset
    if 1==1 {
        kafka {
            bootstrap_servers => "127.0.0.1:9092"
            topic_id => "asset_rcv_event"
            codec => json
        }
    }

    # tcp asset
    if 1==2 {
    	tcp {
    	     codec => json_lines
             host => "127.0.0.1"
    	     port => 18000
             reconnect_interval => 3
        }
    }

    # debug file
    if 1==2{
        file {
            path => "/module/Dfinder/logstash/broker/config/debug.log"
            codec => rubydebug
        }
    }
}


